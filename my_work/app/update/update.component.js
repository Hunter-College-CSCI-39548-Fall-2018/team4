"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sqlite_service_1 = require("../database/sqlite.service");
var router_1 = require("nativescript-angular/router");
var shared_1 = require("../shared");
var application_settings_1 = require("application-settings");
var dialogs = require("tns-core-modules/ui/dialogs");
var UpdateComponent = /** @class */ (function () {
    function UpdateComponent(routerExtensions, userService, database) {
        this.routerExtensions = routerExtensions;
        this.userService = userService;
        this.database = database;
        this.infoMetro = [];
        this.layoutWidth = 400;
        this.layoutHeight = 300;
        this.user_id = application_settings_1.getString("user_id");
    }
    UpdateComponent.prototype.ngOnInit = function () {
        this.selectCard();
    };
    UpdateComponent.prototype.selectCard = function () {
        var _this = this;
        this.infoMetro = [];
        this.database.getdbConnection().then(function (db) {
            db.all("SELECT * FROM metrocard WHERE user_id = ?", [_this.user_id])
                .then(function (rows) {
                for (var row in rows) {
                    _this.infoMetro.push({ id: rows[row][0], type: rows[row][1], date: rows[row][2], amount: rows[row][3], expiration: rows[row][4] });
                }
                _this.db = db;
            }, function (error) {
                console.log("SELECT ERROR", error);
            });
        });
    };
    UpdateComponent.prototype.onItemTap = function (args) {
        var _this = this;
        //args.index
        console.log(args.index);
        dialogs.action({
            title: "Are you sure you want to Update this?",
            message: "Once updated, it cannot be changed ",
            actions: ["REMOVE $2.75", "ADDED $2.75", "REMOVE $5.50", "ADDED $5.50"],
            cancelButtonText: "Cancel",
        }).then(function (result) {
            if (result == "REMOVE $2.75") {
                console.log("Updating card");
                //Delete Card here.
                var metrocard_1 = args.view.bindingContext;
                _this.db.execSQL("UPDATE metrocard SET total_amount = total_amount-2.75 WHERE id=?", [metrocard_1.id]).then(function () {
                    var index = _this.infoMetro.indexOf(metrocard_1);
                    console.log("Object that triggered the event: " + args.object);
                    console.log("View that triggered the event: " + args.view);
                    console.log("Event name: " + args.eventName);
                });
                _this.routerExtensions.navigate(["/home"], { clearHistory: true });
            }
            else if (result == "ADDED $2.75") {
                var metrocard_2 = args.view.bindingContext;
                _this.db.execSQL("UPDATE metrocard SET total_amount = total_amount+2.75 WHERE id=?", [metrocard_2.id]).then(function () {
                    var index = _this.infoMetro.indexOf(metrocard_2);
                    console.log("Object that triggered the event: " + args.object);
                    console.log("View that triggered the event: " + args.view);
                    console.log("Event name: " + args.eventName);
                });
                _this.routerExtensions.navigate(["/home"], { clearHistory: true });
            }
            else if (result == "ADDED $5.50") {
                var metrocard_3 = args.view.bindingContext;
                _this.db.execSQL("UPDATE metrocard SET total_amount = total_amount+5.50 WHERE id=?", [metrocard_3.id]).then(function () {
                    var index = _this.infoMetro.indexOf(metrocard_3);
                    console.log("Object that triggered the event: " + args.object);
                    console.log("View that triggered the event: " + args.view);
                    console.log("Event name: " + args.eventName);
                });
                _this.routerExtensions.navigate(["/home"], { clearHistory: true });
            }
            else if (result == "REMOVE $5.50") {
                var metrocard_4 = args.view.bindingContext;
                _this.db.execSQL("UPDATE metrocard SET total_amount = total_amount-5.50 WHERE id=?", [metrocard_4.id]).then(function () {
                    var index = _this.infoMetro.indexOf(metrocard_4);
                    console.log("Object that triggered the event: " + args.object);
                    console.log("View that triggered the event: " + args.view);
                    console.log("Event name: " + args.eventName);
                });
                _this.routerExtensions.navigate(["/home"], { clearHistory: true });
            }
            else {
                shared_1.alert('Nothing has changed');
                _this.routerExtensions.navigate(["/home"], { clearHistory: true });
            }
        });
    };
    UpdateComponent = __decorate([
        core_1.Component({
            selector: "Update",
            moduleId: module.id,
            templateUrl: "./update.component.html"
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            shared_1.LoginService,
            sqlite_service_1.DatabaseService])
    ], UpdateComponent);
    return UpdateComponent;
}());
exports.UpdateComponent = UpdateComponent;
//# sourceMappingURL=data:application/json;base64,