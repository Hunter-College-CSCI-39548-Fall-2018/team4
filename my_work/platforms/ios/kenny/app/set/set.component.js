"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var application_settings_1 = require("application-settings");
var shared_1 = require("../shared");
var sqlite_service_1 = require("../database/sqlite.service");
var asda = ["Pre-paid", "Weekly", "Monthly"];
var SetComponent = /** @class */ (function () {
    function SetComponent(routerExtensions, userService, database) {
        this.routerExtensions = routerExtensions;
        this.userService = userService;
        this.database = database;
        this.metrocards = [];
        this.infoMetro = [];
        for (var i = 0; i < asda.length; i++) {
            this.metrocards.push(asda[i]);
        }
        {
            this.user_id = application_settings_1.getString("user_id");
        }
    }
    SetComponent.prototype.ngOnInit = function () {
        this.selectCard();
    };
    SetComponent.prototype.selectedIndexChanged = function (args) {
        var picker = args.object;
        this.picked = this.metrocards[picker.selectedIndex];
    };
    SetComponent.prototype.selectCard = function () {
        var _this = this;
        this.infoMetro = [];
        this.database.getdbConnection().then(function (db) {
            db.all("SELECT id, metrocard_type, dateOfPurchase, total_amount, expiration FROM metrocard WHERE user_id = ?", [_this.user_id])
                .then(function (rows) {
                for (var row in rows) {
                    _this.infoMetro.push({ id: rows[row][0], type: rows[row][1], date: rows[row][2], amount: rows[row][3], expiration: rows[row][4] });
                }
                _this.db = db;
            }, function (error) {
                console.log("SELECT ERROR", error);
            });
        });
    };
    SetComponent.prototype.addcard = function () {
        var _this = this;
        var textField = this.metrocardTextField.nativeElement;
        textField.dismissSoftInput();
        this.db.execSQL("INSERT INTO metrocard (metrocard_type, dateOfPurchase, total_amount, expiration, user_id) VALUES (?,?,?,?,?)", [this.picked, this.dateOfPurchase, this.total_amount, this.expiration, this.user_id]).then(function (id) {
            _this.infoMetro.unshift({ id: id, type: _this.picked, date: _this.dateOfPurchase, amount: _this.total_amount, expiration: _this.expiration });
            console.log(id, _this.picked, _this.dateOfPurchase, _this.total_amount, _this.expiration, _this.user_id);
            _this.picked = "";
            _this.dateOfPurchase = "";
            _this.total_amount = 0;
            _this.expiration = "";
        }, function (error) {
            shared_1.alert('An error occurred while adding an item to your list');
            _this.picked = "";
            _this.dateOfPurchase = "";
            _this.total_amount = 0;
            _this.expiration = "";
        });
        this.routerExtensions.navigate(["/home"], { clearHistory: true });
    };
    __decorate([
        core_1.ViewChild("metrocardTextField"),
        __metadata("design:type", core_1.ElementRef)
    ], SetComponent.prototype, "metrocardTextField", void 0);
    SetComponent = __decorate([
        core_1.Component({
            selector: "Set",
            moduleId: module.id,
            templateUrl: "./set.component.html"
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions,
            shared_1.LoginService,
            sqlite_service_1.DatabaseService])
    ], SetComponent);
    return SetComponent;
}());
exports.SetComponent = SetComponent;
//# sourceMappingURL=data:application/json;base64,